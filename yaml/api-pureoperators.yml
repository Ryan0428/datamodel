---
  title: "Pure-operators"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "DataModel\n\nCreates a new variable calculated from existing variable. This method expects definition of the newly created\nvariable and a function which resolves value of the new variable from existing variables.\n\nThis operator is not compose supported.\n\nCreates a new measure based on existing variables"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">schema</td>\n                <td><p>Schema</p> </td>\n                <td><p>Schema of newly defined variable</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">resolver</td>\n                <td><p>VariableResolver</p> </td>\n                <td><p>Resolver format to resolve the current variable</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the DataModel variable.\n const creatorFn = calculateVariable({\n     name: 'powerToWeight',\n     type: 'measure' // Schema of variable\n }, ['horsepower', 'weight_in_lbs', (hp, weight) => hp / weight ]);\n const outputDM = creatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end\n\nCreates a new dimension based on existing variables"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the DataModel variable.\n const creatorFn = calculateVariable({\n     name: 'powerToWeight',\n     type: 'measure' // Schema of variable\n }, ['horsepower', 'weight_in_lbs', (hp, weight) => hp / weight ]);\n const outputDM = creatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end\n\nCreates a new dimension based on existing variables"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the DataModel variable.\n\n const creatorFn = calculateVariable(\n    {\n      name: 'Efficiency',\n      type: 'dimension'\n    }, ['horsepower', (hp) => {\n     if (hp < 80) { return 'low'; },\n     else if (hp < 120) { return 'moderate'; }\n     else { return 'high' }\n }]);\n  const outputDM = creatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the DataModel variable.\n\n const creatorFn = calculateVariable(\n    {\n      name: 'Efficiency',\n      type: 'dimension'\n    }, ['horsepower', (hp) => {\n     if (hp < 80) { return 'low'; },\n     else if (hp < 120) { return 'moderate'; }\n     else { return 'high' }\n }]);\n  const outputDM = creatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=PreparatorFunction></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">PreparatorFunction:</span>Function which expects an instance of DataModel on which the operator needs to be\n     applied."
    - 
      type: "markdown-section"
      content: "DataModel\n\nPerforms sorting according to the specified sorting details. Like every other operator it doesn't mutate the current\nDataModel instance on which it was called, instead returns a new DataModel instance containing the sorted data.\n\nThis operator support multi level sorting by listing the variables using which sorting needs to be performed and\nthe type of sorting `ASC` or `DESC`.\n\nIn the following example, data is sorted by `Origin` field in `DESC` order in first level followed by another level\nof sorting by `Acceleration` in `ASC` order."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">sortingDetails</td>\n                <td><p>Array of Array</p> </td>\n                <td><p>Sorting details based on which the sorting will be performed.</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the DataModel variable.\n\n const sort = DataModel.Operators.sort;\n const preparatorFn = sort([\n     ['Origin', 'DESC']\n     ['Acceleration'] // Default value is ASC\n ]);\n const outputDM = preparatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the DataModel variable.\n\n const sort = DataModel.Operators.sort;\n const preparatorFn = sort([\n     ['Origin', 'DESC']\n     ['Acceleration'] // Default value is ASC\n ]);\n const outputDM = preparatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n  const DataModel = muze.DataModel;\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to DataModel variable.\n const avg = DataModel.Stats.avg;\n const sort = DataModel.Operators.sort;\n const preparatorFn = sort([\n     ['Origin', ['Acceleration', (a, b) => avg(...a.Acceleration) - avg(...b.Acceleration)]]\n ]);\n const outputDM = preparatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n  const DataModel = muze.DataModel;\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to DataModel variable.\n const avg = DataModel.Stats.avg;\n const sort = DataModel.Operators.sort;\n const preparatorFn = sort([\n     ['Origin', ['Acceleration', (a, b) => avg(...a.Acceleration) - avg(...b.Acceleration)]]\n ]);\n const outputDM = preparatorFn(dm);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=PreparatorFunction></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">PreparatorFunction:</span>Function which expects an instance of DataModel on which the operator needs to be\n     applied."
