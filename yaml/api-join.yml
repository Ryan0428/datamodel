---
  title: "Join"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "DataModel\n\nPerforms [crossproduct](httpsenwikipediaorgwikiCartesian_product) between two [DataModel](DataModel)\ninstances with an optional predicate which determines which tuples should be included and returns a new\n[DataModel](DataModel) instance containing the results. This operation is also called theta join.\n\nCross product takes two set and create one set where each value of one set is paired with each value of another\nset.\n\nThis method takes an optional predicate which filters the generated result rows. The predicate is called for\nevery tuple. If the predicate returns true the combined row is included in the resulatant table."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">leftDM</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">rightDM</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">filterFn</td>\n                <td><p>SelectionPredicate</p> </td>\n                <td><p>The predicate function that will filter the result of the crossProduct.</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const join = DataModel.Operators.join;\n let outputDM = join(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const join = DataModel.Operators.join;\n let outputDM = join(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>New DataModel instance created after joining."
