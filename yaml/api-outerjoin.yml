---
  title: "Outer-join"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "DataModel\n\n[Left outer join](httpswwwgeeksforgeeksorgextendedoperatorsinrelationalalgebra) between two\n[DataModel](DataModel) instances is a kind of join that ensures that all the tuples from the left [DataModel](DataModel)\nare present in the resulatant [DataModel](DataModel). This operator takes a predicate which gets called for every\ncombination of tuples (created by cartesian product). Based on the value of predicate the equality is established\nbetween two DataModel."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">leftDm</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">rightDm</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">filterFn</td>\n                <td><p>SelectionPredicate</p> </td>\n                <td><p>The predicate function that will filter the result of the crossProduct.</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined using left outer\n // join.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const leftOuterJoin = DataModel.Operators.leftOuterJoin;\n let outputDM = leftOuterJoin(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined using left outer\n // join.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const leftOuterJoin = DataModel.Operators.leftOuterJoin;\n let outputDM = leftOuterJoin(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>New DataModel instance created after the left outer join operation."
    - 
      type: "markdown-section"
      content: "DataModel\n\n[Right outer join](httpswwwgeeksforgeeksorgextendedoperatorsinrelationalalgebra) between two\n[DataModel](DataModel) instances is a kind of join that ensures that all the tuples from the right [DataModel](DataModel)\nare present in the resulatant [DataModel](DataModel). This operator takes a predicate which gets called for every\ncombination of tuples (created by cartesian product). Based on the value of predicate the equality is established\nbetween two DataModel."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">leftDm</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">rightDm</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">filterFn</td>\n                <td><p>SelectionPredicate</p> </td>\n                <td><p>The predicate function that will filter the result of the crossProduct.</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined using left outer\n // join.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const rightOuterJoin = DataModel.Operators.rightOuterJoin;\n let outputDM = rightOuterJoin(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined using left outer\n // join.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const rightOuterJoin = DataModel.Operators.rightOuterJoin;\n let outputDM = rightOuterJoin(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>New DataModel instance created after the left outer join operation."
    - 
      type: "markdown-section"
      content: "DataModel\n\n[Full outer join](httpswwwgeeksforgeeksorgextendedoperatorsinrelationalalgebra) between two\n[DataModel](DataModel) instances is a kind of join that ensures that all the tuples from the left [DataModel](DataModel) and\nright [DataModel](DataModel) are present in the resulatant [DataModel](DataModel). This operator takes a predicate which gets\ncalled for every combination of tuples (created by cartesian product). Based on the value of predicate the equality\nis established between two DataModel."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">leftDm</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">rightDm</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">filterFn</td>\n                <td><p>SelectionPredicate</p> </td>\n                <td><p>The predicate function that will filter the result of the crossProduct.</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined using left outer\n // join.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const fullOuterJoin = DataModel.Operators.fullOuterJoin;\n let outputDM = fullOuterJoin(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined using left outer\n // join.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n const fullOuterJoin = DataModel.Operators.fullOuterJoin;\n let outputDM = fullOuterJoin(makerDM, nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>New DataModel instance created after the left outer join operation."
