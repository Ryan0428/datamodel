---
  title: "Datamodel"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "## <a name=DataModel></a> Class: DataModel\n\nDataModel is an in-browser representation of tabular data. It supports\n[relational algebra](httpsenwikipediaorgwikiRelational_algebra) operators as well as generic data\nprocessing opearators.\nDataModel extends [Relation](Relation) class which defines all the relational algebra opreators. DataModel gives\ndefinition of generic data processing operators which are not relational algebra complient but needed for ease of\nuse."
    - 
      type: "markdown-section"
      content: "### <a name=\"constructor\"></a> constructor\n\nCreates a new DataModel instance by providing data and schema. Data could be in the form of\n- Flat JSON\n- DSV String\n- 2D Array\n\nBy default DataModel finds suitable adapter to serialize the data. DataModel also expects a\n[schema](Schema) for identifying the variables present in data."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">data</td>\n                <td><p>Array of Object</p> <p>string</p> <p>Array of Array</p> </td>\n                <td><p>Input data in any of the mentioned formats. Checkout      <a href=\"muzedocsintroductiontodatamodelpopulatingdatamodelfromdifferentformatsofdata\">this</a>      example for practical example on how feed different data format.</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">schema</td>\n                <td><p>Array of Schema</p> </td>\n                <td><p>Defination of the variables. Order of the variables in data and order of the      variables in schema has to be same.</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">options</td>\n                <td><p>object</p> </td>\n                <td><p>Optional arguments to specify more settings regarding the creation part<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <tr>                 <td class=\"param-name\">name</td>                 <td><p>string</p> </td>                 <td><p>Name of the datamodel instance. If no name is given an auto generated name is      assigned to the instance.</p> </td>             </tr> <tr>                 <td class=\"param-name\">fieldSeparator</td>                 <td><p>string</p> </td>                 <td><p>specify field separator type if the data is of type dsv string.</p> </td>             </tr></table></td>\n            </tr></table>"
    - 
      type: "code-section"
      content: "const DataModel = muze.DataModel; // Retrieves reference to DataModel from muze namespace\n const data = [\n     { Name:'chevrolet chevelle malibu', Miles_per_Gallo:18, Cylinders:8, Horsepower:130, Year:'1970' },\n     { Name:'ford fiesta', Miles_per_Gallon:36.1, Cylinders:4, Horsepower:66, Year:'1978' },\n     { Name:'bmw 320i', Miles_per_Gallon:21.5, Cylinders:4, Horsepower:110, Year:'1977' }\n ];\n const schema = [\n     { name: 'Name', type: 'dimension' },\n     { name: 'Miles_per_Gallon', type: 'measure', unit : 'gallon', numberformat: val => `${val}G`},\n     { name: 'Cylinders', type: 'dimension' },\n     { name: 'Horsepower', type: 'measure' },\n     { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     { name: 'Origin', type: 'dimension' }\n];\nconst dm = new DataModel(data, schema, { name: 'Cars' });\nprintDM(dm); // internal function to print datamodel, available only in this interface"
      preamble: []
      preambleWithContent: "const DataModel = muze.DataModel; // Retrieves reference to DataModel from muze namespace\n const data = [\n     { Name:'chevrolet chevelle malibu', Miles_per_Gallo:18, Cylinders:8, Horsepower:130, Year:'1970' },\n     { Name:'ford fiesta', Miles_per_Gallon:36.1, Cylinders:4, Horsepower:66, Year:'1978' },\n     { Name:'bmw 320i', Miles_per_Gallon:21.5, Cylinders:4, Horsepower:110, Year:'1977' }\n ];\n const schema = [\n     { name: 'Name', type: 'dimension' },\n     { name: 'Miles_per_Gallon', type: 'measure', unit : 'gallon', numberformat: val => `${val}G`},\n     { name: 'Cylinders', type: 'dimension' },\n     { name: 'Horsepower', type: 'measure' },\n     { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     { name: 'Origin', type: 'dimension' }\n];\nconst dm = new DataModel(data, schema, { name: 'Cars' });\nprintDM(dm); // internal function to print datamodel, available only in this interface"
    - 
      type: "markdown-section"
      content: "### <a name=Reducers></a> static Reducers\n\nReducers are simple functions which reduces an array of numbers to a representative number of the set.\nLike an array of numbers `[10, 20, 5, 15]` can be reduced to `12.5` if average / mean reducer function is\napplied. All the measure fields in datamodel (variables in data) needs a reducer to handle aggregation."
    - 
      type: "markdown-section"
      content: "<a name=ReducerStore></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">ReducerStore:</span>Singleton instance of [ReducerStore](ReducerStore)."
    - 
      type: "markdown-section"
      content: "### <a name=getData></a> getData(options) → {[Array](Array)}\n\nRetrieve the data attached to an instance in JSON format."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">options</td>\n                <td><p>Object</p> </td>\n                <td><p>Options to control how the raw data is to be returned.<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <tr>                 <td class=\"param-name\">order</td>                 <td><p>string</p> </td>                 <td><p>Defines if data is retieved in row order or column order. Possible values      are <code>&#39;rows&#39;</code> and <code>&#39;columns&#39;</code></p> </td>             </tr> <tr>                 <td class=\"param-name\">formatter</td>                 <td><p>function</p> </td>                 <td><p>Formats the output data. This expects an object, where the keys are      the name of the variable needs to be formatted. The formatter function is called for each row passing the      value of the cell for a particular row as arguments. The formatter is a function in the form of      <code>function (value, rowId, schema) =&gt; { ... }</code>      Know more about <a href=\"Fomatter\">Fomatter</a>.</p> </td>             </tr></table></td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const data = dm.getData({\n     order: 'column',\n     formatter: {\n         origin: (val) => val === 'European Union' ? 'EU' : val;\n     }\n });\n //@preamble_start\n });\n //@preamble_end\n console.log(data);"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const data = dm.getData({\n     order: 'column',\n     formatter: {\n         origin: (val) => val === 'European Union' ? 'EU' : val;\n     }\n });\n //@preamble_start\n });\n //@preamble_end\n console.log(data);"
    - 
      type: "markdown-section"
      content: "<a name=Array></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">Array:</span>Returns a multidimensional array of the data with schema. The return format looks like\n     <pre><code>         {\n             data,\n             schema\n         }</code></pre>"
    - 
      type: "markdown-section"
      content: "### <a name=groupBy></a> groupBy(fieldsArr, reducers, config) → {[DataModel](DataModel)}\n\nGroups the data using particular dimensions by reducing measures. It expects a list of dimensions using which\nit projects the datamodel and perform aggregations to reduce the duplicate tuples. Refer this\n[document](muzedocsdatamodeloperatorsgroupby) to know the intuition behind groupBy.\n\nDataModel by default provides definition of few [Reducers](reducer) for reducing a measure when\naggregation is required for `groupBy`.\n[User defined reducers](ReducerStore) can also be registered.\n\nThis is the chained implementation of `groupBy`.\n`groupBy` also supports [composability](muzeapidatamodelcomposegroupby)."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">fieldsArr</td>\n                <td><p>Array of string</p> </td>\n                <td><p>Array containing the name of dimensions using which groupBy should happen.</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">reducers</td>\n                <td><p>Object</p> </td>\n                <td><p>A simple key value pair whose key is the variable name and value is the name of the      reducer. If its not passed, or any variable is ommitted from the object, default aggregation function is      used from the schema of the variable.</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const outputDM = dm.groupBy(['Year'], { horsepower: 'max' } );\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const outputDM = dm.groupBy(['Year'], { horsepower: 'max' } );\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>Returns a new DataModel instance after performing the groupby."
    - 
      type: "markdown-section"
      content: "### <a name=sort></a> sort(sortingDetails) → {[DataModel](DataModel)}\n\nPerforms sorting according to the specified sorting details.Like every other operator it doesn't mutate the\ncurrent DataModel instance on which it was called, instead returns a new DataModel instance containing the sorted\ndata.\n\nDataModel support multi level sorting by listing the variables using which sorting needs to be performed and\nthe type of sorting `ASC` or `DESC`.\n\nIn the following example, data is sorted by `Origin` field in `DESC` order in first level followed by another\nlevel of sorting by `Acceleration` in `ASC` order."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">sortingDetails</td>\n                <td><p>Array of Array</p> </td>\n                <td><p>Sorting details based on which the sorting will be performed.</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n let outputDM = dm.sort([\n     ['Origin', 'DESC']\n     ['Acceleration'] // Default value is ASC\n ]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n let outputDM = dm.sort([\n     ['Origin', 'DESC']\n     ['Acceleration'] // Default value is ASC\n ]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to DataModel variable.\n const avg = DataModel.Stats.avg;\n const outputDM = dm.sort([\n     ['Origin', ['Acceleration', (a, b) => avg(...a.Acceleration) - avg(...b.Acceleration)]]\n ]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to DataModel variable.\n const avg = DataModel.Stats.avg;\n const outputDM = dm.sort([\n     ['Origin', ['Acceleration', (a, b) => avg(...a.Acceleration) - avg(...b.Acceleration)]]\n ]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>Returns a new instance of DataModel with sorted data."
    - 
      type: "markdown-section"
      content: "### <a name=calculateVariable></a> calculateVariable(schema, dependency, config) → {[DataModel](DataModel)}\n\nCreates a new variable calculated from existing variable. This method expects definition of the newly created\nvariable and a function which resolves value of the new variable from existing variables.\n\nCreates a new measure based on existing variables"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">schema</td>\n                <td><p>Schema</p> </td>\n                <td><p>Schema of newly defined variable</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">resolver</td>\n                <td><p>VariableResolver</p> </td>\n                <td><p>Resolver format to resolve the current variable</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const outputDM = dm.calculateVariable({\n     name: 'powerToWeight',\n     type: 'measure' // Schema of variable\n }, ['horsepower', 'weight_in_lbs', (hp, weight) => hp / weight ]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end\n\nCreates a new dimension based on existing variables"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const outputDM = dm.calculateVariable({\n     name: 'powerToWeight',\n     type: 'measure' // Schema of variable\n }, ['horsepower', 'weight_in_lbs', (hp, weight) => hp / weight ]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end\n\nCreates a new dimension based on existing variables"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const outputDM= dm.calculateVariable(\n    {\n      name: 'Efficiency',\n      type: 'dimension'\n    }, ['horsepower', (hp) => {\n     if (hp < 80) { return 'low'; },\n     else if (hp < 120) { return 'moderate'; }\n     else { return 'high' }\n }]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n const outputDM= dm.calculateVariable(\n    {\n      name: 'Efficiency',\n      type: 'dimension'\n    }, ['horsepower', (hp) => {\n     if (hp < 80) { return 'low'; },\n     else if (hp < 120) { return 'moderate'; }\n     else { return 'high' }\n }]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>Instance of DataModel with the new field"
