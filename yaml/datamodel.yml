---
  title: "datamodel.js"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "___DataModel___"
    - 
      type: "markdown-section"
      content: "\n| Param | Type | Description |\n| --- | --- | --- |\n| data | Object.<Array> | in the above mentioned format |\n| schema | Object.<Array> | defination of the variables. The order of the variables in data and order of theundefined     variables in schema has to be same |\n| options | object | optional arguments |\n| options.name | string | name of the datamodel instance. If no name is given an auto generated name isundefined     assigned to the instance. |"
    - 
      type: "markdown-section"
      content: "Creates a new DataModel instance by providing data and schema. Data could be of the form of\n- Flat JSON\n- DSV String\n- 2D Array\n\nBy default DataModel finds suitable adapter to serialize the data. DataModel also expects a schema for\nidentifying the variables.\n\nLearn more about schema here."
    - 
      type: "code-section"
      content: "const data = loadData('cars.csv');\nconst schema = [\n     { name: 'Name', type: 'dimension' },\n     { name: 'Miles_per_Gallon', type: 'measure', unit : 'cm', scale: '1000', numberformat: '12-3-3' },\n     { name: 'Cylinders', type: 'dimension' },\n     { name: 'Displacement', type: 'measure' },\n     { name: 'Horsepower', type: 'measure' },\n     { name: 'Weight_in_lbs', type: 'measure' },\n     { name: 'Acceleration', type: 'measure' },\n     { name: 'Year', type: 'dimension' },\n     { name: 'Origin', type: 'dimension' }\n];\nconst dm = new DataModel(data, schema, { name: 'Cars' });\ntable(dm);"
    - 
      type: "markdown-section"
      content: "___DataModel#getData___"
    - 
      type: "markdown-section"
      content: "\n| Param | Type | Description |\n| --- | --- | --- |\n| options | Object | Define how the data need to be returned. |\n| options.order | Object | Define the order of the data: row or column. |\n| options.formatter | Object | An object map containing field specific formatter function. |\n| options.withUid | Object | Whether the data uids will be included or not. |\n| options.sort | Object | The sorting details to sort the data. |"
    - 
      type: "markdown-section"
      content: "Returns the data after operation in the format of\nmultidimensional array according to the given option value."
    - 
      type: "code-section"
      content: "// Return data with formatted date value.\nconst options = {\n order: 'row',\n formatter: {\n     birthday: (val, rowId, schema) => {\n         return yourCustomFormatter(val, \"%Y-%m-%d\");\n     }\n }\n}\n\n const dm = new DataModel(data, schema);\n const dataFormatted = dm.getData(options);"
