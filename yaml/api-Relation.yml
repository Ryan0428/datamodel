---
  title: "Relation"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=getSchema></a> getSchema </span></h2>\n\nRetrieves the [schema](Schema) details for every [field](Field) in an array format."
    - 
      type: "markdown-section"
      content: "<a name=Schema></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[Schema](Schema):&nbsp;</span>Array of fields schema.\n     <pre><code>     [\n         { name: &#39;Name&#39;, type: &#39;dimension&#39; },\n         { name: &#39;Miles_per_Gallon&#39;, type: &#39;measure&#39;, numberFormat: (val) =&gt; `${val} miles / gallon` },\n         { name: &#39;Cylinder&#39;, type: &#39;dimension&#39; },\n         { name: &#39;Displacement&#39;, type: &#39;measure&#39;, defAggFn: &#39;max&#39; },\n         { name: &#39;HorsePower&#39;, type: &#39;measure&#39;, defAggFn: &#39;max&#39; },\n         { name: &#39;Weight_in_lbs&#39;, type: &#39;measure&#39;, defAggFn: &#39;avg&#39;,  },\n         { name: &#39;Acceleration&#39;, type: &#39;measure&#39;, defAggFn: &#39;avg&#39; },\n         { name: &#39;Year&#39;, type: &#39;dimension&#39;, subtype: &#39;datetime&#39;, format: &#39;%Y&#39; },\n         { name: &#39;Origin&#39; }\n     ]</code></pre>"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=getName></a> getName </span></h2>\n\nReturns the name of the [DataModel](DataModel) instance. If no name was specified during [DataModel](DataModel)\ninitialization, then it returns a auto-generated name."
    - 
      type: "markdown-section"
      content: "<a name=string></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">string:&nbsp;</span>Name of the DataModel instance."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=join></a> join </span></h2>\n\nPerforms [crossproduct](https://en.wikipedia.org/wiki/Cartesian_product) between two [DataModel](DataModel)\ninstances with an optional predicate which determines which tuples should be included and returns a new\n[DataModel](DataModel) instance containing the results. This operation is also called theta join.\n\nCross product takes two set and create one set where each value of one set is paired with each value of another\nset.\n\nThis method takes an optional predicate which filters the generated result rows. The predicate is called for\nevery tuple. If the predicate returns true the combined row is included in the resulatant table."
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n let outputDM = makerDM.join(nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: "     const data = params[0];"
        - 
          preTag: "     const schema = params[1];"
        - 
          preTag: "     const dm = new muze.DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon']);\n\n let outputDM = makerDM.join(nameDM,\n     (makerDM, nameDM) => makerDM.Maker.value === nameDM.Name.value.split(/\\s/)[0]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">joinWith</td>\n                <td><p>DataModel</p> </td>\n                <td><p>The DataModel to be joined with the current instance DataModel.</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">filterFn</td>\n                <td><p>SelectionPredicate</p> </td>\n                <td><p>The predicate function that will filter the result of the crossProduct.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[DataModel](DataModel):&nbsp;</span>New DataModel instance created after joining."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=naturalJoin></a> naturalJoin </span></h2>\n\n[Natural join](https://www.geeksforgeeks.org/extended-operators-in-relational-algebra) is a special kind\nof joining where filtering of rows are performed internally by resolving common fields are from both table and\nthe rows with common value are included."
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon'])\n\n let outputDM = makerDM.naturalJoin(nameDM);"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: "     const data = params[0];"
        - 
          preTag: "     const schema = params[1];"
        - 
          preTag: "     const dm = new muze.DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined.\n let makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n let nameDM = dm.project(['Name','Miles_per_Gallon'])\n\n let outputDM = makerDM.naturalJoin(nameDM);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">joinWith</td>\n                <td><p>DataModel</p> </td>\n                <td><p>The DataModel with which the current instance of DataModel on which the method is      called will be joined.</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[DataModel](DataModel):&nbsp;</span>New DataModel instance created after joining."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=union></a> union </span></h2>\n\nUnion operation can be termed as vertical stacking of all rows from both the DataModel instances, provided that\nboth of the [DataModel](DataModel) instances should have same column names."
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates two small DataModel instance from the original DataModel instance, one only for european cars,\n // another for cars from USA.\n usaMakerDM = dm.select(fields => fields.Origin.value === 'USA');\n euroMakerDM = dm.select(fields => fields.Origin.value === 'Europe');\n\n outputDM = usaMakerDM.union(euroMakerDM);"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: "     const data = params[0];"
        - 
          preTag: "     const schema = params[1];"
        - 
          preTag: "     const dm = new muze.DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates two small DataModel instance from the original DataModel instance, one only for european cars,\n // another for cars from USA.\n usaMakerDM = dm.select(fields => fields.Origin.value === 'USA');\n euroMakerDM = dm.select(fields => fields.Origin.value === 'Europe');\n\n outputDM = usaMakerDM.union(euroMakerDM);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">unionWith</td>\n                <td><p>DataModel</p> </td>\n                <td><p>DataModel instance for which union has to be applied with the instance on which      the method is called</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[DataModel](DataModel):&nbsp;</span>New DataModel instance with the result of the operation"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=difference></a> difference </span></h2>\n\nDifference operation only include rows which are present in the datamodel on which it was called but not on the\none passed as argument."
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates a DataModel instance only including USA\n usaMakerDM = dm.select(fields => fields.Origin.value === 'USA');\n\n outputDM = dm.difference(usaMakerDM);"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: "     const data = params[0];"
        - 
          preTag: "     const schema = params[1];"
        - 
          preTag: "     const dm = new muze.DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n // Creates a DataModel instance only including USA\n usaMakerDM = dm.select(fields => fields.Origin.value === 'USA');\n\n outputDM = dm.difference(usaMakerDM);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">differenceWith</td>\n                <td><p>DataModel</p> </td>\n                <td><p>DataModel instance for which difference has to be applied with the instance      on which the method is called</p> </td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[DataModel](DataModel):&nbsp;</span>New DataModel instance with the result of the operation"
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=select></a> select </span></h2>\n\nSelection is a row filtering operation. It expects an predicate and an optional mode which control which all rows\nshould be included in the resultant DataModel instance.\n\n[SelectionPredicate](SelectionPredicate) is a function which returns a boolean value for each tuple present in the DataModel.\nFor selection opearation the predicate function is called for each row of DataModel instance with the current row\npassed as argument.\n\nAfter executing [SelectionPredicate](SelectionPredicate) the rows are labeled as either an member of selection set or an member\nof rejection set.\n\n[FilteringMode](FilteringMode) operates on the selection and rejection set to determine which one would reflect in the\nresulatant datamodel."
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n let outputDM= dt.select(fields => fields.Origin.value === 'USA')"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: " const data = params[0];"
        - 
          preTag: " const schema = params[1];"
        - 
          preTag: " const dm = new muze.DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n let outputDM= dt.select(fields => fields.Origin.value === 'USA')\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to the variable DataModel\n\nconst outputDM= dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.INVERSE })"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: " const data = params[0];"
        - 
          preTag: " const schema = params[1];"
        - 
          preTag: " const DataModel = muze.DataModel;"
        - 
          preTag: " const dm = new DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to the variable DataModel\n\nconst outputDM= dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.INVERSE })\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">selectFn</td>\n                <td><p>SelectionPredicate</p> </td>\n                <td><p>Predicate funciton which is called for each row with the current row      <p><code>function (row, i)  { ... }</code></p></p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">config</td>\n                <td><p>Object</p> </td>\n                <td><p>The configuration object to control the inclusion exclusion of a row in resultant      DataModel instance<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <tr>                 <td class=\"param-name\">mode</td>                 <td><p>FilteringMode</p> </td>                 <td><p>The mode of the selection</p> </td>             </tr></table></td>\n            </tr></table>"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[DataModel](DataModel):&nbsp;</span>Returns the new DataModel instance(s) after operation."
    - 
      type: "markdown-section"
      content: "<h2><span style=\"font-family: Source Code Pro;font-weight:500;font-size:24px;color: #eb5757\"><a name=project></a> project </span></h2>\n\nProjection is column (field) filtering operation. It expects list of fields' name and either include those or\nexclude those based on [FilteringMode](FilteringMode) on the resultant DataModel instance.\n\nProjection expects array of fields name based on which it creates the selection and rejection set. All the field\nwhose name is present in array goes in selection set and rest of the fields goes in rejection set.\n\n[FilteringMode](FilteringMode) operates on the selection and rejection set to determine which one would reflect in the\nresulatant datamodel."
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n let outputDM= dt.project([\"Name\", \"HorsePower\"]);"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: " const data = params[0];"
        - 
          preTag: " const schema = params[1];"
        - 
          preTag: " const dm = new muze.DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const dm = new muze.DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm.\n\n let outputDM= dt.project([\"Name\", \"HorsePower\"]);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "code-section"
      content: " // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to the variable DataModel\n\n const outputDM= dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.INVERSE });"
      preamble: 
        - 
          preTag: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {"
        - 
          preTag: " const data = params[0];"
        - 
          preTag: " const schema = params[1];"
        - 
          preTag: " const DataModel = muze.DataModel;"
        - 
          preTag: " const dm = new DataModel(data, schema);"
        - 
          endTag: " printDM(outputDM);"
        - 
          endTag: " });"
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n const data = params[0];\n const schema = params[1];\n const DataModel = muze.DataModel;\n const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted\n // from muze namespace and assigned to the variable DataModel\n\n const outputDM= dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.INVERSE });\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">projField</td>\n                <td><p>Array&lt;(string|Regexp)&gt;</p> </td>\n                <td><p>An array of column names in string or regular expression.</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">config</td>\n                <td><p>Object</p> </td>\n                <td><p>An optional config to control the creation of new DataModel<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead></p> <tr>                 <td class=\"param-name\">mode</td>                 <td><p>FilteringMode</p> </td>                 <td><p>Mode of the projection</p> </td>             </tr></table></td>\n            </tr></table>"
    - 
      type: "Info"
      content: 
        subType: "warning"
        title: "Note"
        description: "Selection and rejection set is only a logical idea for concept explanation purpose.\n\nProjection with default mode `FilterningMode.NORMAL`"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">[DataModel](DataModel):&nbsp;</span>Returns the new DataModel instance after operation."
    - 
      type: "markdown-section"
      content: "## <a name=dispose></a> dispose\n\nFrees up the resources associated with the current DataModel instance and breaks all the links instance has in\nthe DAG."
