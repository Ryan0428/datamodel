---
  title: "Natural-join"
  description: "Documented Methods"
  sections: 
    - 
      type: "markdown-section"
      content: "DataModel\n\n[Natural join](httpswwwgeeksforgeeksorgextendedoperatorsinrelationalalgebra) is a special kind\nof joining where filtering of rows are performed internally by resolving common fields are from both table and\nthe rows with common value are included."
    - 
      type: "markdown-section"
      content: "<p class=\"sub-header\">Parameters:</p>\n<table><thead><tr><td>Name</td><td>Type</td><td>Description</td></tr></thead>\n<tr>\n                <td class=\"param-name\">leftDM</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr>\n<tr>\n                <td class=\"param-name\">rightDM</td>\n                <td><p>DataModel</p> </td>\n                <td><p>Instance of DataModel</p> </td>\n            </tr></table>"
    - 
      type: "code-section"
      content: " Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const DataModel = muze.DataModel;\n     const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined. Used chained\n // operator for conciseness.\n const makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n const nameDM = dm.project(['Name','Miles_per_Gallon'])\n\n const naturalJoin = DataModel.Operatros.naturalJoin;\n const outputDM = naturalJoin(makerDM, nameDM);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
      preamble: []
      preambleWithContent: "//@preamble_start\n Promise.all([loadData('/static/cars.json'), loadData('/static/cars-schema.json')]).then(function (params) {\n     const data = params[0];\n     const schema = params[1];\n     const DataModel = muze.DataModel;\n     const dm = new DataModel(data, schema);\n //@preamble_end\n // DataModel instance is created from https://www.charts.com/static/cars.json data,\n // https://www.charts.com/static/cars-schema.json schema and assigned to variable dm. DataModel is extracted from\n // muze namespace and assigned to the variable DataModel.\n\n // Creates two small DataModel instance from the original DataModel instance, which will be joined. Used chained\n // operator for conciseness.\n const makerDM = dm.groupBy(['Origin', 'Maker']).project(['Origin', 'Maker']);\n const nameDM = dm.project(['Name','Miles_per_Gallon'])\n\n const naturalJoin = DataModel.Operatros.naturalJoin;\n const outputDM = naturalJoin(makerDM, nameDM);\n //@preamble_start\n printDM(outputDM);\n });\n //@preamble_end"
    - 
      type: "markdown-section"
      content: "<a name=DataModel></a><p class=\"sub-header\">Returns:</p>\n\n <span style=\"font-family: 'Source Code Pro';margin-left: 2%;\">DataModel:</span>New DataModel instance with joined data"
